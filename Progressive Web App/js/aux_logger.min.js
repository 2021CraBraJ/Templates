function aux_logger(){this.types=["error","general","debug","info"];this.errorRef="/errors/";this.type_prefix="-";this.firebase_usable=this.allow_firebase=!1}
aux_logger.prototype.log=function(a,b){b=void 0===b?"general":b;if(aux_logger.firebase_usable&&aux_logger.allow_firebase){var c=new Uint32Array(2);window.crypto.getRandomValues(c);firebase.auth().signInAnonymously()["catch"](function(a){console.error(a.code+" - "+a.message)});switch(b){case "error":console.error("ERROR "+this.type_prefix+" "+a);firebase.database().ref(this.errorRef+"/"+Date.now()+c.join("")).set({message:a,time:Date()});break;case "general":console.log("GENERAL "+this.type_prefix+
" "+a);break;case "debug":console.debug("DEBUG "+this.type_prefix+" "+a);break;case "info":console.info("INFO "+this.type_prefix+" "+a);break;default:console.error("aux_logger | For Developers: Please specify a valid type"),console.log("GENERAL "+this.type_prefix+" "+a)}}else switch(b){case "error":console.error("ERROR "+this.type_prefix+" "+a);break;case "general":console.log("GENERAL "+this.type_prefix+" "+a);break;case "debug":console.debug("DEBUG "+this.type_prefix+" "+a);break;case "info":console.info("INFO "+
this.type_prefix+" "+a);break;default:console.error("aux_logger | For Developers: Please specify a valid type"),console.log("GENERAL "+this.type_prefix+" "+a)}};
aux_logger.prototype.help=function(a){switch(void 0===a?null:a){case "error":this.log("Using this logging type will log to the console with the Error severity.","info");break;case "general":this.log("This will be used by default if no type is specified and logs with general severity.","info");break;case "debug":this.log("Using this logging type will log to the console with the Debug severity.","info");break;case "info":this.log("Using this logging type will log to the console with the Debug severity(Used for testing).",
"info");break;default:a=aux_logger.types.join(),this.log("Valid types logging are "+a+" hope this helped you in some way.","info")}};window.onload=function(){window.aux_logger=new aux_logger;try{void 0!=firebase&&(aux_logger.firebase_usable=!0)}catch(a){}};